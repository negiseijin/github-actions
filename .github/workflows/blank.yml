name: TEST

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

on:
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    permissions:
       actions: write
       contents: write
       statuses: write

    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      WORK_FLOW_FILE: ci.yml

    steps:
      - uses: actions/checkout@v4

      - name: Get run id
        id: run-id-selector
        run: |
          id=$(gh api \
               repos/${{ github.repository }}/actions/workflows/${{ env.WORK_FLOW_FILE }}/runs \
               | jq -r '[.workflow_runs[] | select(.head_branch == "${{ github.ref_name }}").id][0]')
          echo "id=$id" >> "$GITHUB_OUTPUT"

      - name: Get sha
        id: sha-selector
        run: |
          sha=$(gh api \
                repos/${{ github.repository }}/actions/workflows/${{ env.WORK_FLOW_FILE }}/runs \
                | jq -r '[.workflow_runs[] | select(.head_branch == "${{ github.ref_name }}").head_sha][0]')
          echo "sha=$sha" >> "$GITHUB_OUTPUT"

      - name: Get target url
        id: target-url-selector
        run: |
          url=$(gh api \
                repos/${{ github.repository }}/actions/runs/${{ steps.run-id-selector.outputs.id }} \
               | jq -r '.html_url')
          echo "url=$url" >> "$GITHUB_OUTPUT"

      - name: Create check run
        uses: actions/github-script@v7
        id: create-check-run-selector
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            result-encoding: string
            script: |
                const { Octokit } = require("@octokit/action");
                const octokit = new Octokit();
                const {data} = await octokit.request('POST /repos/${{ github.repository }}/check-runs', {
                    owner: '${{ github.repository_owner }}',
                    repo: '${{ github.repository }}',
                    name: 'mighty_readme',
                    head_sha: '${{ steps.sha-selector.outputs.sha }}',
                    status: 'queued',
                });
                console.log(data);
                return data.id;

    #   - name: Create a commit status
    #     id: commit-status-selector
    #     run: |
    #       gh api \
    #         --method POST \
    #         -H "Accept: application/vnd.github+json" \
    #         -H "X-GitHub-Api-Version: 2022-11-28" \
    #         /repos/${{ github.repository }}/statuses/${{ steps.sha-selector.outputs.sha }} \
    #         -f state='${{ job.status }}' \
    #         -f target_url='${{ steps.target-url-selector.outputs.url }}' \
    #         -f description='${{ job.status }}' \
    #         -f context='TEST / Build (manually)'

      - name: Disp step summary
        if: ${{ always() }}
        run: |
          echo "## JOBS_SUMMARY "${{ job.status == 'success' && ':tada:' || ':x:' }}"" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
          echo "| Step | Outcome | Remarks |" >> $GITHUB_STEP_SUMMARY
          echo "|------|---------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "|Get run id|\`${{ steps.run-id-selector.outcome }}\`|\`${{ steps.run-id-selector.outputs.id }}\`|" >> $GITHUB_STEP_SUMMARY
          echo "|Get sha|\`${{ steps.sha-selector.outcome }}\`| ${{ steps.sha-selector.outputs.sha }} |" >> $GITHUB_STEP_SUMMARY
          echo "|Get target url|\`${{ steps.target-url-selector.outcome }}\`|\`${{ steps.target-url-selector.outputs.url }}\`|" >> $GITHUB_STEP_SUMMARY
          echo "|Create check run|\`${{ steps.run-id-selector.outcome }}\`| ${{ steps.run-id-selector.outputs.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "|Create a commit status|\`${{ steps.commit-status-selector.outcome }}\`|  |" >> $GITHUB_STEP_SUMMARY
